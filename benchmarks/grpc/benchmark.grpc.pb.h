// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: benchmark.proto
#ifndef GRPC_benchmark_2eproto__INCLUDED
#define GRPC_benchmark_2eproto__INCLUDED

#include "benchmark.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_benchmark {

class RpcBenchmark final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc_benchmark.RpcBenchmark";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc_benchmark::Uint64* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Uint64>> AsyncFibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Uint64>>(AsyncFibonacciRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Uint64>> PrepareAsyncFibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Uint64>>(PrepareAsyncFibonacciRaw(context, request, cq));
    }
    virtual ::grpc::Status GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc_benchmark::Vec_Uint64* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Vec_Uint64>> AsyncGenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Vec_Uint64>>(AsyncGenRandIntsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Vec_Uint64>> PrepareAsyncGenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Vec_Uint64>>(PrepareAsyncGenRandIntsRaw(context, request, cq));
    }
    virtual ::grpc::Status StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc_benchmark::Double* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>> AsyncStdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>>(AsyncStdDevRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>> PrepareAsyncStdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>>(PrepareAsyncStdDevRaw(context, request, cq));
    }
    virtual ::grpc::Status AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc_benchmark::Double* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>> AsyncAverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>>(AsyncAverageContainer_uint64Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>> PrepareAsyncAverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>>(PrepareAsyncAverageContainer_uint64Raw(context, request, cq));
    }
    virtual ::grpc::Status AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc_benchmark::Double* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>> AsyncAverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>>(AsyncAverageContainer_doubleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>> PrepareAsyncAverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>>(PrepareAsyncAverageContainer_doubleRaw(context, request, cq));
    }
    virtual ::grpc::Status HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc_benchmark::String* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::String>> AsyncHashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::String>>(AsyncHashComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::String>> PrepareAsyncHashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::String>>(PrepareAsyncHashComplexRaw(context, request, cq));
    }
    virtual ::grpc::Status KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc_benchmark::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Empty>> AsyncKillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Empty>>(AsyncKillServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Empty>> PrepareAsyncKillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Empty>>(PrepareAsyncKillServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Uint64>* AsyncFibonacciRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Uint64>* PrepareAsyncFibonacciRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Vec_Uint64>* AsyncGenRandIntsRaw(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Vec_Uint64>* PrepareAsyncGenRandIntsRaw(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>* AsyncStdDevRaw(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>* PrepareAsyncStdDevRaw(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>* AsyncAverageContainer_uint64Raw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>* PrepareAsyncAverageContainer_uint64Raw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>* AsyncAverageContainer_doubleRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Double>* PrepareAsyncAverageContainer_doubleRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::String>* AsyncHashComplexRaw(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::String>* PrepareAsyncHashComplexRaw(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Empty>* AsyncKillServerRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_benchmark::Empty>* PrepareAsyncKillServerRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc_benchmark::Uint64* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Uint64>> AsyncFibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Uint64>>(AsyncFibonacciRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Uint64>> PrepareAsyncFibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Uint64>>(PrepareAsyncFibonacciRaw(context, request, cq));
    }
    ::grpc::Status GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc_benchmark::Vec_Uint64* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Vec_Uint64>> AsyncGenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Vec_Uint64>>(AsyncGenRandIntsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Vec_Uint64>> PrepareAsyncGenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Vec_Uint64>>(PrepareAsyncGenRandIntsRaw(context, request, cq));
    }
    ::grpc::Status StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc_benchmark::Double* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>> AsyncStdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>>(AsyncStdDevRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>> PrepareAsyncStdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>>(PrepareAsyncStdDevRaw(context, request, cq));
    }
    ::grpc::Status AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc_benchmark::Double* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>> AsyncAverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>>(AsyncAverageContainer_uint64Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>> PrepareAsyncAverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>>(PrepareAsyncAverageContainer_uint64Raw(context, request, cq));
    }
    ::grpc::Status AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc_benchmark::Double* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>> AsyncAverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>>(AsyncAverageContainer_doubleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>> PrepareAsyncAverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>>(PrepareAsyncAverageContainer_doubleRaw(context, request, cq));
    }
    ::grpc::Status HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc_benchmark::String* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::String>> AsyncHashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::String>>(AsyncHashComplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::String>> PrepareAsyncHashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::String>>(PrepareAsyncHashComplexRaw(context, request, cq));
    }
    ::grpc::Status KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc_benchmark::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Empty>> AsyncKillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Empty>>(AsyncKillServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Empty>> PrepareAsyncKillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Empty>>(PrepareAsyncKillServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response, std::function<void(::grpc::Status)>) override;
      void Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response, std::function<void(::grpc::Status)>) override;
      void GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)>) override;
      void StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)>) override;
      void AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)>) override;
      void AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response, std::function<void(::grpc::Status)>) override;
      void HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response, ::grpc::ClientUnaryReactor* reactor) override;
      void KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response, std::function<void(::grpc::Status)>) override;
      void KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Uint64>* AsyncFibonacciRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Uint64>* PrepareAsyncFibonacciRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Vec_Uint64>* AsyncGenRandIntsRaw(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Vec_Uint64>* PrepareAsyncGenRandIntsRaw(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* AsyncStdDevRaw(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* PrepareAsyncStdDevRaw(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* AsyncAverageContainer_uint64Raw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* PrepareAsyncAverageContainer_uint64Raw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* AsyncAverageContainer_doubleRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* PrepareAsyncAverageContainer_doubleRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::String>* AsyncHashComplexRaw(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::String>* PrepareAsyncHashComplexRaw(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Empty>* AsyncKillServerRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Empty>* PrepareAsyncKillServerRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Fibonacci_;
    const ::grpc::internal::RpcMethod rpcmethod_GenRandInts_;
    const ::grpc::internal::RpcMethod rpcmethod_StdDev_;
    const ::grpc::internal::RpcMethod rpcmethod_AverageContainer_uint64_;
    const ::grpc::internal::RpcMethod rpcmethod_AverageContainer_double_;
    const ::grpc::internal::RpcMethod rpcmethod_HashComplex_;
    const ::grpc::internal::RpcMethod rpcmethod_KillServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Fibonacci(::grpc::ServerContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response);
    virtual ::grpc::Status GenRandInts(::grpc::ServerContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response);
    virtual ::grpc::Status StdDev(::grpc::ServerContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response);
    virtual ::grpc::Status AverageContainer_uint64(::grpc::ServerContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response);
    virtual ::grpc::Status AverageContainer_double(::grpc::ServerContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response);
    virtual ::grpc::Status HashComplex(::grpc::ServerContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response);
    virtual ::grpc::Status KillServer(::grpc::ServerContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Fibonacci : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Fibonacci() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Fibonacci() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fibonacci(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Uint64* /*request*/, ::grpc_benchmark::Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFibonacci(::grpc::ServerContext* context, ::grpc_benchmark::Uint64* request, ::grpc::ServerAsyncResponseWriter< ::grpc_benchmark::Uint64>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenRandInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenRandInts() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GenRandInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenRandInts(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::GenRandInts_Msg* /*request*/, ::grpc_benchmark::Vec_Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenRandInts(::grpc::ServerContext* context, ::grpc_benchmark::GenRandInts_Msg* request, ::grpc::ServerAsyncResponseWriter< ::grpc_benchmark::Vec_Uint64>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StdDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StdDev() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StdDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StdDev(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::TenDoubles* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStdDev(::grpc::ServerContext* context, ::grpc_benchmark::TenDoubles* request, ::grpc::ServerAsyncResponseWriter< ::grpc_benchmark::Double>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AverageContainer_uint64 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AverageContainer_uint64() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AverageContainer_uint64() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_uint64(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Uint64* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAverageContainer_uint64(::grpc::ServerContext* context, ::grpc_benchmark::Vec_Uint64* request, ::grpc::ServerAsyncResponseWriter< ::grpc_benchmark::Double>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AverageContainer_double : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AverageContainer_double() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AverageContainer_double() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_double(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Double* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAverageContainer_double(::grpc::ServerContext* context, ::grpc_benchmark::Vec_Double* request, ::grpc::ServerAsyncResponseWriter< ::grpc_benchmark::Double>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HashComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HashComplex() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_HashComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HashComplex(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::ComplexObject* /*request*/, ::grpc_benchmark::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHashComplex(::grpc::ServerContext* context, ::grpc_benchmark::ComplexObject* request, ::grpc::ServerAsyncResponseWriter< ::grpc_benchmark::String>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_KillServer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Empty* /*request*/, ::grpc_benchmark::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKillServer(::grpc::ServerContext* context, ::grpc_benchmark::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpc_benchmark::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Fibonacci<WithAsyncMethod_GenRandInts<WithAsyncMethod_StdDev<WithAsyncMethod_AverageContainer_uint64<WithAsyncMethod_AverageContainer_double<WithAsyncMethod_HashComplex<WithAsyncMethod_KillServer<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Fibonacci : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Fibonacci() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response) { return this->Fibonacci(context, request, response); }));}
    void SetMessageAllocatorFor_Fibonacci(
        ::grpc::MessageAllocator< ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Fibonacci() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fibonacci(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Uint64* /*request*/, ::grpc_benchmark::Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Fibonacci(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_benchmark::Uint64* /*request*/, ::grpc_benchmark::Uint64* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenRandInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenRandInts() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::GenRandInts_Msg, ::grpc_benchmark::Vec_Uint64>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response) { return this->GenRandInts(context, request, response); }));}
    void SetMessageAllocatorFor_GenRandInts(
        ::grpc::MessageAllocator< ::grpc_benchmark::GenRandInts_Msg, ::grpc_benchmark::Vec_Uint64>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::GenRandInts_Msg, ::grpc_benchmark::Vec_Uint64>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GenRandInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenRandInts(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::GenRandInts_Msg* /*request*/, ::grpc_benchmark::Vec_Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenRandInts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_benchmark::GenRandInts_Msg* /*request*/, ::grpc_benchmark::Vec_Uint64* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StdDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StdDev() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::TenDoubles, ::grpc_benchmark::Double>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response) { return this->StdDev(context, request, response); }));}
    void SetMessageAllocatorFor_StdDev(
        ::grpc::MessageAllocator< ::grpc_benchmark::TenDoubles, ::grpc_benchmark::Double>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::TenDoubles, ::grpc_benchmark::Double>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StdDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StdDev(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::TenDoubles* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StdDev(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_benchmark::TenDoubles* /*request*/, ::grpc_benchmark::Double* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AverageContainer_uint64 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AverageContainer_uint64() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::Double>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response) { return this->AverageContainer_uint64(context, request, response); }));}
    void SetMessageAllocatorFor_AverageContainer_uint64(
        ::grpc::MessageAllocator< ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::Double>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::Double>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AverageContainer_uint64() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_uint64(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Uint64* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AverageContainer_uint64(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_benchmark::Vec_Uint64* /*request*/, ::grpc_benchmark::Double* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AverageContainer_double : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AverageContainer_double() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::Vec_Double, ::grpc_benchmark::Double>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response) { return this->AverageContainer_double(context, request, response); }));}
    void SetMessageAllocatorFor_AverageContainer_double(
        ::grpc::MessageAllocator< ::grpc_benchmark::Vec_Double, ::grpc_benchmark::Double>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::Vec_Double, ::grpc_benchmark::Double>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AverageContainer_double() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_double(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Double* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AverageContainer_double(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_benchmark::Vec_Double* /*request*/, ::grpc_benchmark::Double* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HashComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HashComplex() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::ComplexObject, ::grpc_benchmark::String>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response) { return this->HashComplex(context, request, response); }));}
    void SetMessageAllocatorFor_HashComplex(
        ::grpc::MessageAllocator< ::grpc_benchmark::ComplexObject, ::grpc_benchmark::String>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::ComplexObject, ::grpc_benchmark::String>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HashComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HashComplex(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::ComplexObject* /*request*/, ::grpc_benchmark::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HashComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_benchmark::ComplexObject* /*request*/, ::grpc_benchmark::String* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_KillServer() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::Empty, ::grpc_benchmark::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response) { return this->KillServer(context, request, response); }));}
    void SetMessageAllocatorFor_KillServer(
        ::grpc::MessageAllocator< ::grpc_benchmark::Empty, ::grpc_benchmark::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpc_benchmark::Empty, ::grpc_benchmark::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Empty* /*request*/, ::grpc_benchmark::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* KillServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc_benchmark::Empty* /*request*/, ::grpc_benchmark::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Fibonacci<WithCallbackMethod_GenRandInts<WithCallbackMethod_StdDev<WithCallbackMethod_AverageContainer_uint64<WithCallbackMethod_AverageContainer_double<WithCallbackMethod_HashComplex<WithCallbackMethod_KillServer<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Fibonacci : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Fibonacci() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Fibonacci() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fibonacci(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Uint64* /*request*/, ::grpc_benchmark::Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenRandInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenRandInts() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GenRandInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenRandInts(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::GenRandInts_Msg* /*request*/, ::grpc_benchmark::Vec_Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StdDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StdDev() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StdDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StdDev(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::TenDoubles* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AverageContainer_uint64 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AverageContainer_uint64() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AverageContainer_uint64() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_uint64(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Uint64* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AverageContainer_double : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AverageContainer_double() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AverageContainer_double() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_double(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Double* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HashComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HashComplex() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_HashComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HashComplex(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::ComplexObject* /*request*/, ::grpc_benchmark::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_KillServer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Empty* /*request*/, ::grpc_benchmark::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Fibonacci : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Fibonacci() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Fibonacci() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fibonacci(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Uint64* /*request*/, ::grpc_benchmark::Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFibonacci(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenRandInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenRandInts() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GenRandInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenRandInts(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::GenRandInts_Msg* /*request*/, ::grpc_benchmark::Vec_Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenRandInts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StdDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StdDev() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StdDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StdDev(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::TenDoubles* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStdDev(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AverageContainer_uint64 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AverageContainer_uint64() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AverageContainer_uint64() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_uint64(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Uint64* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAverageContainer_uint64(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AverageContainer_double : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AverageContainer_double() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AverageContainer_double() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_double(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Double* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAverageContainer_double(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HashComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HashComplex() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_HashComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HashComplex(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::ComplexObject* /*request*/, ::grpc_benchmark::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHashComplex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_KillServer() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Empty* /*request*/, ::grpc_benchmark::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKillServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Fibonacci : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Fibonacci() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Fibonacci(context, request, response); }));
    }
    ~WithRawCallbackMethod_Fibonacci() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fibonacci(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Uint64* /*request*/, ::grpc_benchmark::Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Fibonacci(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenRandInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenRandInts() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenRandInts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GenRandInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenRandInts(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::GenRandInts_Msg* /*request*/, ::grpc_benchmark::Vec_Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenRandInts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StdDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StdDev() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StdDev(context, request, response); }));
    }
    ~WithRawCallbackMethod_StdDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StdDev(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::TenDoubles* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StdDev(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AverageContainer_uint64 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AverageContainer_uint64() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AverageContainer_uint64(context, request, response); }));
    }
    ~WithRawCallbackMethod_AverageContainer_uint64() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_uint64(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Uint64* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AverageContainer_uint64(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AverageContainer_double : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AverageContainer_double() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AverageContainer_double(context, request, response); }));
    }
    ~WithRawCallbackMethod_AverageContainer_double() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AverageContainer_double(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Double* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AverageContainer_double(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HashComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HashComplex() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HashComplex(context, request, response); }));
    }
    ~WithRawCallbackMethod_HashComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HashComplex(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::ComplexObject* /*request*/, ::grpc_benchmark::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HashComplex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_KillServer() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->KillServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Empty* /*request*/, ::grpc_benchmark::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* KillServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Fibonacci : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Fibonacci() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64>* streamer) {
                       return this->StreamedFibonacci(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Fibonacci() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Fibonacci(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Uint64* /*request*/, ::grpc_benchmark::Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFibonacci(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_benchmark::Uint64,::grpc_benchmark::Uint64>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenRandInts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenRandInts() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_benchmark::GenRandInts_Msg, ::grpc_benchmark::Vec_Uint64>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpc_benchmark::GenRandInts_Msg, ::grpc_benchmark::Vec_Uint64>* streamer) {
                       return this->StreamedGenRandInts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenRandInts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenRandInts(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::GenRandInts_Msg* /*request*/, ::grpc_benchmark::Vec_Uint64* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenRandInts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_benchmark::GenRandInts_Msg,::grpc_benchmark::Vec_Uint64>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StdDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StdDev() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_benchmark::TenDoubles, ::grpc_benchmark::Double>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpc_benchmark::TenDoubles, ::grpc_benchmark::Double>* streamer) {
                       return this->StreamedStdDev(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StdDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StdDev(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::TenDoubles* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStdDev(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_benchmark::TenDoubles,::grpc_benchmark::Double>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AverageContainer_uint64 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AverageContainer_uint64() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::Double>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::Double>* streamer) {
                       return this->StreamedAverageContainer_uint64(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AverageContainer_uint64() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AverageContainer_uint64(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Uint64* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAverageContainer_uint64(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_benchmark::Vec_Uint64,::grpc_benchmark::Double>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AverageContainer_double : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AverageContainer_double() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_benchmark::Vec_Double, ::grpc_benchmark::Double>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpc_benchmark::Vec_Double, ::grpc_benchmark::Double>* streamer) {
                       return this->StreamedAverageContainer_double(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AverageContainer_double() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AverageContainer_double(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Vec_Double* /*request*/, ::grpc_benchmark::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAverageContainer_double(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_benchmark::Vec_Double,::grpc_benchmark::Double>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HashComplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HashComplex() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_benchmark::ComplexObject, ::grpc_benchmark::String>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpc_benchmark::ComplexObject, ::grpc_benchmark::String>* streamer) {
                       return this->StreamedHashComplex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HashComplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HashComplex(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::ComplexObject* /*request*/, ::grpc_benchmark::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHashComplex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_benchmark::ComplexObject,::grpc_benchmark::String>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_KillServer() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpc_benchmark::Empty, ::grpc_benchmark::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpc_benchmark::Empty, ::grpc_benchmark::Empty>* streamer) {
                       return this->StreamedKillServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::grpc_benchmark::Empty* /*request*/, ::grpc_benchmark::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKillServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_benchmark::Empty,::grpc_benchmark::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Fibonacci<WithStreamedUnaryMethod_GenRandInts<WithStreamedUnaryMethod_StdDev<WithStreamedUnaryMethod_AverageContainer_uint64<WithStreamedUnaryMethod_AverageContainer_double<WithStreamedUnaryMethod_HashComplex<WithStreamedUnaryMethod_KillServer<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Fibonacci<WithStreamedUnaryMethod_GenRandInts<WithStreamedUnaryMethod_StdDev<WithStreamedUnaryMethod_AverageContainer_uint64<WithStreamedUnaryMethod_AverageContainer_double<WithStreamedUnaryMethod_HashComplex<WithStreamedUnaryMethod_KillServer<Service > > > > > > > StreamedService;
};

}  // namespace grpc_benchmark


#endif  // GRPC_benchmark_2eproto__INCLUDED
