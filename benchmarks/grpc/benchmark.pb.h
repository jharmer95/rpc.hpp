// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_benchmark_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto;
namespace grpc_benchmark {
class ComplexObject;
struct ComplexObjectDefaultTypeInternal;
extern ComplexObjectDefaultTypeInternal _ComplexObject_default_instance_;
class Double;
struct DoubleDefaultTypeInternal;
extern DoubleDefaultTypeInternal _Double_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GenRandInts_Msg;
struct GenRandInts_MsgDefaultTypeInternal;
extern GenRandInts_MsgDefaultTypeInternal _GenRandInts_Msg_default_instance_;
class String;
struct StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
class TenDoubles;
struct TenDoublesDefaultTypeInternal;
extern TenDoublesDefaultTypeInternal _TenDoubles_default_instance_;
class Uint64;
struct Uint64DefaultTypeInternal;
extern Uint64DefaultTypeInternal _Uint64_default_instance_;
class Vec_Double;
struct Vec_DoubleDefaultTypeInternal;
extern Vec_DoubleDefaultTypeInternal _Vec_Double_default_instance_;
class Vec_Uint64;
struct Vec_Uint64DefaultTypeInternal;
extern Vec_Uint64DefaultTypeInternal _Vec_Uint64_default_instance_;
}  // namespace grpc_benchmark
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc_benchmark::ComplexObject* Arena::CreateMaybeMessage<::grpc_benchmark::ComplexObject>(Arena*);
template<> ::grpc_benchmark::Double* Arena::CreateMaybeMessage<::grpc_benchmark::Double>(Arena*);
template<> ::grpc_benchmark::Empty* Arena::CreateMaybeMessage<::grpc_benchmark::Empty>(Arena*);
template<> ::grpc_benchmark::GenRandInts_Msg* Arena::CreateMaybeMessage<::grpc_benchmark::GenRandInts_Msg>(Arena*);
template<> ::grpc_benchmark::String* Arena::CreateMaybeMessage<::grpc_benchmark::String>(Arena*);
template<> ::grpc_benchmark::TenDoubles* Arena::CreateMaybeMessage<::grpc_benchmark::TenDoubles>(Arena*);
template<> ::grpc_benchmark::Uint64* Arena::CreateMaybeMessage<::grpc_benchmark::Uint64>(Arena*);
template<> ::grpc_benchmark::Vec_Double* Arena::CreateMaybeMessage<::grpc_benchmark::Vec_Double>(Arena*);
template<> ::grpc_benchmark::Vec_Uint64* Arena::CreateMaybeMessage<::grpc_benchmark::Vec_Uint64>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc_benchmark {

// ===================================================================

class Uint64 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_benchmark.Uint64) */ {
 public:
  inline Uint64() : Uint64(nullptr) {}
  ~Uint64() override;
  explicit PROTOBUF_CONSTEXPR Uint64(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint64(const Uint64& from);
  Uint64(Uint64&& from) noexcept
    : Uint64() {
    *this = ::std::move(from);
  }

  inline Uint64& operator=(const Uint64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint64& operator=(Uint64&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uint64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint64* internal_default_instance() {
    return reinterpret_cast<const Uint64*>(
               &_Uint64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Uint64& a, Uint64& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint64* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uint64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uint64>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uint64& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Uint64& from) {
    Uint64::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint64* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.Uint64";
  }
  protected:
  explicit Uint64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // uint64 val = 1;
  void clear_val();
  uint64_t val() const;
  void set_val(uint64_t value);
  private:
  uint64_t _internal_val() const;
  void _internal_set_val(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_benchmark.Uint64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_2eproto;
};
// -------------------------------------------------------------------

class Double final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_benchmark.Double) */ {
 public:
  inline Double() : Double(nullptr) {}
  ~Double() override;
  explicit PROTOBUF_CONSTEXPR Double(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Double(const Double& from);
  Double(Double&& from) noexcept
    : Double() {
    *this = ::std::move(from);
  }

  inline Double& operator=(const Double& from) {
    CopyFrom(from);
    return *this;
  }
  inline Double& operator=(Double&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Double& default_instance() {
    return *internal_default_instance();
  }
  static inline const Double* internal_default_instance() {
    return reinterpret_cast<const Double*>(
               &_Double_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Double& a, Double& b) {
    a.Swap(&b);
  }
  inline void Swap(Double* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Double* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Double* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Double>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Double& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Double& from) {
    Double::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Double* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.Double";
  }
  protected:
  explicit Double(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // double val = 1;
  void clear_val();
  double val() const;
  void set_val(double value);
  private:
  double _internal_val() const;
  void _internal_set_val(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_benchmark.Double)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_2eproto;
};
// -------------------------------------------------------------------

class String final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_benchmark.String) */ {
 public:
  inline String() : String(nullptr) {}
  ~String() override;
  explicit PROTOBUF_CONSTEXPR String(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  String(const String& from);
  String(String&& from) noexcept
    : String() {
    *this = ::std::move(from);
  }

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }
  inline String& operator=(String&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const String& default_instance() {
    return *internal_default_instance();
  }
  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(String& a, String& b) {
    a.Swap(&b);
  }
  inline void Swap(String* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(String* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  String* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<String>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const String& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const String& from) {
    String::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(String* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.String";
  }
  protected:
  explicit String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // string val = 1;
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // @@protoc_insertion_point(class_scope:grpc_benchmark.String)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_2eproto;
};
// -------------------------------------------------------------------

class Vec_Uint64 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_benchmark.Vec_Uint64) */ {
 public:
  inline Vec_Uint64() : Vec_Uint64(nullptr) {}
  ~Vec_Uint64() override;
  explicit PROTOBUF_CONSTEXPR Vec_Uint64(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec_Uint64(const Vec_Uint64& from);
  Vec_Uint64(Vec_Uint64&& from) noexcept
    : Vec_Uint64() {
    *this = ::std::move(from);
  }

  inline Vec_Uint64& operator=(const Vec_Uint64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec_Uint64& operator=(Vec_Uint64&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec_Uint64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec_Uint64* internal_default_instance() {
    return reinterpret_cast<const Vec_Uint64*>(
               &_Vec_Uint64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vec_Uint64& a, Vec_Uint64& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec_Uint64* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec_Uint64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec_Uint64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec_Uint64>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec_Uint64& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vec_Uint64& from) {
    Vec_Uint64::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec_Uint64* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.Vec_Uint64";
  }
  protected:
  explicit Vec_Uint64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // repeated uint64 val = 1;
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  private:
  uint64_t _internal_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_val() const;
  void _internal_add_val(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_val();
  public:
  uint64_t val(int index) const;
  void set_val(int index, uint64_t value);
  void add_val(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:grpc_benchmark.Vec_Uint64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > val_;
    mutable std::atomic<int> _val_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_2eproto;
};
// -------------------------------------------------------------------

class Vec_Double final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_benchmark.Vec_Double) */ {
 public:
  inline Vec_Double() : Vec_Double(nullptr) {}
  ~Vec_Double() override;
  explicit PROTOBUF_CONSTEXPR Vec_Double(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec_Double(const Vec_Double& from);
  Vec_Double(Vec_Double&& from) noexcept
    : Vec_Double() {
    *this = ::std::move(from);
  }

  inline Vec_Double& operator=(const Vec_Double& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec_Double& operator=(Vec_Double&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec_Double& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec_Double* internal_default_instance() {
    return reinterpret_cast<const Vec_Double*>(
               &_Vec_Double_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vec_Double& a, Vec_Double& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec_Double* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec_Double* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec_Double* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec_Double>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec_Double& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vec_Double& from) {
    Vec_Double::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec_Double* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.Vec_Double";
  }
  protected:
  explicit Vec_Double(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // repeated double val = 1;
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  private:
  double _internal_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_val() const;
  void _internal_add_val(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_val();
  public:
  double val(int index) const;
  void set_val(int index, double value);
  void add_val(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:grpc_benchmark.Vec_Double)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_2eproto;
};
// -------------------------------------------------------------------

class GenRandInts_Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_benchmark.GenRandInts_Msg) */ {
 public:
  inline GenRandInts_Msg() : GenRandInts_Msg(nullptr) {}
  ~GenRandInts_Msg() override;
  explicit PROTOBUF_CONSTEXPR GenRandInts_Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenRandInts_Msg(const GenRandInts_Msg& from);
  GenRandInts_Msg(GenRandInts_Msg&& from) noexcept
    : GenRandInts_Msg() {
    *this = ::std::move(from);
  }

  inline GenRandInts_Msg& operator=(const GenRandInts_Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenRandInts_Msg& operator=(GenRandInts_Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenRandInts_Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenRandInts_Msg* internal_default_instance() {
    return reinterpret_cast<const GenRandInts_Msg*>(
               &_GenRandInts_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GenRandInts_Msg& a, GenRandInts_Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(GenRandInts_Msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenRandInts_Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenRandInts_Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenRandInts_Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenRandInts_Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenRandInts_Msg& from) {
    GenRandInts_Msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenRandInts_Msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.GenRandInts_Msg";
  }
  protected:
  explicit GenRandInts_Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kSzFieldNumber = 3,
  };
  // uint64 min = 1;
  void clear_min();
  uint64_t min() const;
  void set_min(uint64_t value);
  private:
  uint64_t _internal_min() const;
  void _internal_set_min(uint64_t value);
  public:

  // uint64 max = 2;
  void clear_max();
  uint64_t max() const;
  void set_max(uint64_t value);
  private:
  uint64_t _internal_max() const;
  void _internal_set_max(uint64_t value);
  public:

  // uint64 sz = 3;
  void clear_sz();
  uint64_t sz() const;
  void set_sz(uint64_t value);
  private:
  uint64_t _internal_sz() const;
  void _internal_set_sz(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_benchmark.GenRandInts_Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t min_;
    uint64_t max_;
    uint64_t sz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_2eproto;
};
// -------------------------------------------------------------------

class TenDoubles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_benchmark.TenDoubles) */ {
 public:
  inline TenDoubles() : TenDoubles(nullptr) {}
  ~TenDoubles() override;
  explicit PROTOBUF_CONSTEXPR TenDoubles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TenDoubles(const TenDoubles& from);
  TenDoubles(TenDoubles&& from) noexcept
    : TenDoubles() {
    *this = ::std::move(from);
  }

  inline TenDoubles& operator=(const TenDoubles& from) {
    CopyFrom(from);
    return *this;
  }
  inline TenDoubles& operator=(TenDoubles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TenDoubles& default_instance() {
    return *internal_default_instance();
  }
  static inline const TenDoubles* internal_default_instance() {
    return reinterpret_cast<const TenDoubles*>(
               &_TenDoubles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TenDoubles& a, TenDoubles& b) {
    a.Swap(&b);
  }
  inline void Swap(TenDoubles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TenDoubles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TenDoubles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TenDoubles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TenDoubles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TenDoubles& from) {
    TenDoubles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TenDoubles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.TenDoubles";
  }
  protected:
  explicit TenDoubles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kD1FieldNumber = 1,
    kD2FieldNumber = 2,
    kD3FieldNumber = 3,
    kD4FieldNumber = 4,
    kD5FieldNumber = 5,
    kD6FieldNumber = 6,
    kD7FieldNumber = 7,
    kD8FieldNumber = 8,
    kD9FieldNumber = 9,
    kD10FieldNumber = 10,
  };
  // double d1 = 1;
  void clear_d1();
  double d1() const;
  void set_d1(double value);
  private:
  double _internal_d1() const;
  void _internal_set_d1(double value);
  public:

  // double d2 = 2;
  void clear_d2();
  double d2() const;
  void set_d2(double value);
  private:
  double _internal_d2() const;
  void _internal_set_d2(double value);
  public:

  // double d3 = 3;
  void clear_d3();
  double d3() const;
  void set_d3(double value);
  private:
  double _internal_d3() const;
  void _internal_set_d3(double value);
  public:

  // double d4 = 4;
  void clear_d4();
  double d4() const;
  void set_d4(double value);
  private:
  double _internal_d4() const;
  void _internal_set_d4(double value);
  public:

  // double d5 = 5;
  void clear_d5();
  double d5() const;
  void set_d5(double value);
  private:
  double _internal_d5() const;
  void _internal_set_d5(double value);
  public:

  // double d6 = 6;
  void clear_d6();
  double d6() const;
  void set_d6(double value);
  private:
  double _internal_d6() const;
  void _internal_set_d6(double value);
  public:

  // double d7 = 7;
  void clear_d7();
  double d7() const;
  void set_d7(double value);
  private:
  double _internal_d7() const;
  void _internal_set_d7(double value);
  public:

  // double d8 = 8;
  void clear_d8();
  double d8() const;
  void set_d8(double value);
  private:
  double _internal_d8() const;
  void _internal_set_d8(double value);
  public:

  // double d9 = 9;
  void clear_d9();
  double d9() const;
  void set_d9(double value);
  private:
  double _internal_d9() const;
  void _internal_set_d9(double value);
  public:

  // double d10 = 10;
  void clear_d10();
  double d10() const;
  void set_d10(double value);
  private:
  double _internal_d10() const;
  void _internal_set_d10(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_benchmark.TenDoubles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double d1_;
    double d2_;
    double d3_;
    double d4_;
    double d5_;
    double d6_;
    double d7_;
    double d8_;
    double d9_;
    double d10_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_2eproto;
};
// -------------------------------------------------------------------

class ComplexObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_benchmark.ComplexObject) */ {
 public:
  inline ComplexObject() : ComplexObject(nullptr) {}
  ~ComplexObject() override;
  explicit PROTOBUF_CONSTEXPR ComplexObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexObject(const ComplexObject& from);
  ComplexObject(ComplexObject&& from) noexcept
    : ComplexObject() {
    *this = ::std::move(from);
  }

  inline ComplexObject& operator=(const ComplexObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexObject& operator=(ComplexObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexObject* internal_default_instance() {
    return reinterpret_cast<const ComplexObject*>(
               &_ComplexObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ComplexObject& a, ComplexObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexObject& from) {
    ComplexObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.ComplexObject";
  }
  protected:
  explicit ComplexObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kValsFieldNumber = 5,
    kIdFieldNumber = 1,
    kFlag1FieldNumber = 3,
    kFlag2FieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes vals = 5;
  void clear_vals();
  const std::string& vals() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vals(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vals();
  PROTOBUF_NODISCARD std::string* release_vals();
  void set_allocated_vals(std::string* vals);
  private:
  const std::string& _internal_vals() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vals(const std::string& value);
  std::string* _internal_mutable_vals();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool flag1 = 3;
  void clear_flag1();
  bool flag1() const;
  void set_flag1(bool value);
  private:
  bool _internal_flag1() const;
  void _internal_set_flag1(bool value);
  public:

  // bool flag2 = 4;
  void clear_flag2();
  bool flag2() const;
  void set_flag2(bool value);
  private:
  bool _internal_flag2() const;
  void _internal_set_flag2(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_benchmark.ComplexObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vals_;
    int32_t id_;
    bool flag1_;
    bool flag2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:grpc_benchmark.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_benchmark.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc_benchmark.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_benchmark_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uint64

// uint64 val = 1;
inline void Uint64::clear_val() {
  _impl_.val_ = uint64_t{0u};
}
inline uint64_t Uint64::_internal_val() const {
  return _impl_.val_;
}
inline uint64_t Uint64::val() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.Uint64.val)
  return _internal_val();
}
inline void Uint64::_internal_set_val(uint64_t value) {
  
  _impl_.val_ = value;
}
inline void Uint64::set_val(uint64_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.Uint64.val)
}

// -------------------------------------------------------------------

// Double

// double val = 1;
inline void Double::clear_val() {
  _impl_.val_ = 0;
}
inline double Double::_internal_val() const {
  return _impl_.val_;
}
inline double Double::val() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.Double.val)
  return _internal_val();
}
inline void Double::_internal_set_val(double value) {
  
  _impl_.val_ = value;
}
inline void Double::set_val(double value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.Double.val)
}

// -------------------------------------------------------------------

// String

// string val = 1;
inline void String::clear_val() {
  _impl_.val_.ClearToEmpty();
}
inline const std::string& String::val() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.String.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void String::set_val(ArgT0&& arg0, ArgT... args) {
 
 _impl_.val_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_benchmark.String.val)
}
inline std::string* String::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:grpc_benchmark.String.val)
  return _s;
}
inline const std::string& String::_internal_val() const {
  return _impl_.val_.Get();
}
inline void String::_internal_set_val(const std::string& value) {
  
  _impl_.val_.Set(value, GetArenaForAllocation());
}
inline std::string* String::_internal_mutable_val() {
  
  return _impl_.val_.Mutable(GetArenaForAllocation());
}
inline std::string* String::release_val() {
  // @@protoc_insertion_point(field_release:grpc_benchmark.String.val)
  return _impl_.val_.Release();
}
inline void String::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  _impl_.val_.SetAllocated(val, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_.IsDefault()) {
    _impl_.val_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_benchmark.String.val)
}

// -------------------------------------------------------------------

// Vec_Uint64

// repeated uint64 val = 1;
inline int Vec_Uint64::_internal_val_size() const {
  return _impl_.val_.size();
}
inline int Vec_Uint64::val_size() const {
  return _internal_val_size();
}
inline void Vec_Uint64::clear_val() {
  _impl_.val_.Clear();
}
inline uint64_t Vec_Uint64::_internal_val(int index) const {
  return _impl_.val_.Get(index);
}
inline uint64_t Vec_Uint64::val(int index) const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.Vec_Uint64.val)
  return _internal_val(index);
}
inline void Vec_Uint64::set_val(int index, uint64_t value) {
  _impl_.val_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.Vec_Uint64.val)
}
inline void Vec_Uint64::_internal_add_val(uint64_t value) {
  _impl_.val_.Add(value);
}
inline void Vec_Uint64::add_val(uint64_t value) {
  _internal_add_val(value);
  // @@protoc_insertion_point(field_add:grpc_benchmark.Vec_Uint64.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Vec_Uint64::_internal_val() const {
  return _impl_.val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Vec_Uint64::val() const {
  // @@protoc_insertion_point(field_list:grpc_benchmark.Vec_Uint64.val)
  return _internal_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Vec_Uint64::_internal_mutable_val() {
  return &_impl_.val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Vec_Uint64::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:grpc_benchmark.Vec_Uint64.val)
  return _internal_mutable_val();
}

// -------------------------------------------------------------------

// Vec_Double

// repeated double val = 1;
inline int Vec_Double::_internal_val_size() const {
  return _impl_.val_.size();
}
inline int Vec_Double::val_size() const {
  return _internal_val_size();
}
inline void Vec_Double::clear_val() {
  _impl_.val_.Clear();
}
inline double Vec_Double::_internal_val(int index) const {
  return _impl_.val_.Get(index);
}
inline double Vec_Double::val(int index) const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.Vec_Double.val)
  return _internal_val(index);
}
inline void Vec_Double::set_val(int index, double value) {
  _impl_.val_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.Vec_Double.val)
}
inline void Vec_Double::_internal_add_val(double value) {
  _impl_.val_.Add(value);
}
inline void Vec_Double::add_val(double value) {
  _internal_add_val(value);
  // @@protoc_insertion_point(field_add:grpc_benchmark.Vec_Double.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vec_Double::_internal_val() const {
  return _impl_.val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vec_Double::val() const {
  // @@protoc_insertion_point(field_list:grpc_benchmark.Vec_Double.val)
  return _internal_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vec_Double::_internal_mutable_val() {
  return &_impl_.val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vec_Double::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:grpc_benchmark.Vec_Double.val)
  return _internal_mutable_val();
}

// -------------------------------------------------------------------

// GenRandInts_Msg

// uint64 min = 1;
inline void GenRandInts_Msg::clear_min() {
  _impl_.min_ = uint64_t{0u};
}
inline uint64_t GenRandInts_Msg::_internal_min() const {
  return _impl_.min_;
}
inline uint64_t GenRandInts_Msg::min() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.GenRandInts_Msg.min)
  return _internal_min();
}
inline void GenRandInts_Msg::_internal_set_min(uint64_t value) {
  
  _impl_.min_ = value;
}
inline void GenRandInts_Msg::set_min(uint64_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.GenRandInts_Msg.min)
}

// uint64 max = 2;
inline void GenRandInts_Msg::clear_max() {
  _impl_.max_ = uint64_t{0u};
}
inline uint64_t GenRandInts_Msg::_internal_max() const {
  return _impl_.max_;
}
inline uint64_t GenRandInts_Msg::max() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.GenRandInts_Msg.max)
  return _internal_max();
}
inline void GenRandInts_Msg::_internal_set_max(uint64_t value) {
  
  _impl_.max_ = value;
}
inline void GenRandInts_Msg::set_max(uint64_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.GenRandInts_Msg.max)
}

// uint64 sz = 3;
inline void GenRandInts_Msg::clear_sz() {
  _impl_.sz_ = uint64_t{0u};
}
inline uint64_t GenRandInts_Msg::_internal_sz() const {
  return _impl_.sz_;
}
inline uint64_t GenRandInts_Msg::sz() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.GenRandInts_Msg.sz)
  return _internal_sz();
}
inline void GenRandInts_Msg::_internal_set_sz(uint64_t value) {
  
  _impl_.sz_ = value;
}
inline void GenRandInts_Msg::set_sz(uint64_t value) {
  _internal_set_sz(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.GenRandInts_Msg.sz)
}

// -------------------------------------------------------------------

// TenDoubles

// double d1 = 1;
inline void TenDoubles::clear_d1() {
  _impl_.d1_ = 0;
}
inline double TenDoubles::_internal_d1() const {
  return _impl_.d1_;
}
inline double TenDoubles::d1() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d1)
  return _internal_d1();
}
inline void TenDoubles::_internal_set_d1(double value) {
  
  _impl_.d1_ = value;
}
inline void TenDoubles::set_d1(double value) {
  _internal_set_d1(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d1)
}

// double d2 = 2;
inline void TenDoubles::clear_d2() {
  _impl_.d2_ = 0;
}
inline double TenDoubles::_internal_d2() const {
  return _impl_.d2_;
}
inline double TenDoubles::d2() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d2)
  return _internal_d2();
}
inline void TenDoubles::_internal_set_d2(double value) {
  
  _impl_.d2_ = value;
}
inline void TenDoubles::set_d2(double value) {
  _internal_set_d2(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d2)
}

// double d3 = 3;
inline void TenDoubles::clear_d3() {
  _impl_.d3_ = 0;
}
inline double TenDoubles::_internal_d3() const {
  return _impl_.d3_;
}
inline double TenDoubles::d3() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d3)
  return _internal_d3();
}
inline void TenDoubles::_internal_set_d3(double value) {
  
  _impl_.d3_ = value;
}
inline void TenDoubles::set_d3(double value) {
  _internal_set_d3(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d3)
}

// double d4 = 4;
inline void TenDoubles::clear_d4() {
  _impl_.d4_ = 0;
}
inline double TenDoubles::_internal_d4() const {
  return _impl_.d4_;
}
inline double TenDoubles::d4() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d4)
  return _internal_d4();
}
inline void TenDoubles::_internal_set_d4(double value) {
  
  _impl_.d4_ = value;
}
inline void TenDoubles::set_d4(double value) {
  _internal_set_d4(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d4)
}

// double d5 = 5;
inline void TenDoubles::clear_d5() {
  _impl_.d5_ = 0;
}
inline double TenDoubles::_internal_d5() const {
  return _impl_.d5_;
}
inline double TenDoubles::d5() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d5)
  return _internal_d5();
}
inline void TenDoubles::_internal_set_d5(double value) {
  
  _impl_.d5_ = value;
}
inline void TenDoubles::set_d5(double value) {
  _internal_set_d5(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d5)
}

// double d6 = 6;
inline void TenDoubles::clear_d6() {
  _impl_.d6_ = 0;
}
inline double TenDoubles::_internal_d6() const {
  return _impl_.d6_;
}
inline double TenDoubles::d6() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d6)
  return _internal_d6();
}
inline void TenDoubles::_internal_set_d6(double value) {
  
  _impl_.d6_ = value;
}
inline void TenDoubles::set_d6(double value) {
  _internal_set_d6(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d6)
}

// double d7 = 7;
inline void TenDoubles::clear_d7() {
  _impl_.d7_ = 0;
}
inline double TenDoubles::_internal_d7() const {
  return _impl_.d7_;
}
inline double TenDoubles::d7() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d7)
  return _internal_d7();
}
inline void TenDoubles::_internal_set_d7(double value) {
  
  _impl_.d7_ = value;
}
inline void TenDoubles::set_d7(double value) {
  _internal_set_d7(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d7)
}

// double d8 = 8;
inline void TenDoubles::clear_d8() {
  _impl_.d8_ = 0;
}
inline double TenDoubles::_internal_d8() const {
  return _impl_.d8_;
}
inline double TenDoubles::d8() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d8)
  return _internal_d8();
}
inline void TenDoubles::_internal_set_d8(double value) {
  
  _impl_.d8_ = value;
}
inline void TenDoubles::set_d8(double value) {
  _internal_set_d8(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d8)
}

// double d9 = 9;
inline void TenDoubles::clear_d9() {
  _impl_.d9_ = 0;
}
inline double TenDoubles::_internal_d9() const {
  return _impl_.d9_;
}
inline double TenDoubles::d9() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d9)
  return _internal_d9();
}
inline void TenDoubles::_internal_set_d9(double value) {
  
  _impl_.d9_ = value;
}
inline void TenDoubles::set_d9(double value) {
  _internal_set_d9(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d9)
}

// double d10 = 10;
inline void TenDoubles::clear_d10() {
  _impl_.d10_ = 0;
}
inline double TenDoubles::_internal_d10() const {
  return _impl_.d10_;
}
inline double TenDoubles::d10() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.TenDoubles.d10)
  return _internal_d10();
}
inline void TenDoubles::_internal_set_d10(double value) {
  
  _impl_.d10_ = value;
}
inline void TenDoubles::set_d10(double value) {
  _internal_set_d10(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.TenDoubles.d10)
}

// -------------------------------------------------------------------

// ComplexObject

// int32 id = 1;
inline void ComplexObject::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ComplexObject::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ComplexObject::id() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.ComplexObject.id)
  return _internal_id();
}
inline void ComplexObject::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ComplexObject::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.ComplexObject.id)
}

// string name = 2;
inline void ComplexObject::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ComplexObject::name() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.ComplexObject.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComplexObject::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_benchmark.ComplexObject.name)
}
inline std::string* ComplexObject::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc_benchmark.ComplexObject.name)
  return _s;
}
inline const std::string& ComplexObject::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ComplexObject::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexObject::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ComplexObject::release_name() {
  // @@protoc_insertion_point(field_release:grpc_benchmark.ComplexObject.name)
  return _impl_.name_.Release();
}
inline void ComplexObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_benchmark.ComplexObject.name)
}

// bool flag1 = 3;
inline void ComplexObject::clear_flag1() {
  _impl_.flag1_ = false;
}
inline bool ComplexObject::_internal_flag1() const {
  return _impl_.flag1_;
}
inline bool ComplexObject::flag1() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.ComplexObject.flag1)
  return _internal_flag1();
}
inline void ComplexObject::_internal_set_flag1(bool value) {
  
  _impl_.flag1_ = value;
}
inline void ComplexObject::set_flag1(bool value) {
  _internal_set_flag1(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.ComplexObject.flag1)
}

// bool flag2 = 4;
inline void ComplexObject::clear_flag2() {
  _impl_.flag2_ = false;
}
inline bool ComplexObject::_internal_flag2() const {
  return _impl_.flag2_;
}
inline bool ComplexObject::flag2() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.ComplexObject.flag2)
  return _internal_flag2();
}
inline void ComplexObject::_internal_set_flag2(bool value) {
  
  _impl_.flag2_ = value;
}
inline void ComplexObject::set_flag2(bool value) {
  _internal_set_flag2(value);
  // @@protoc_insertion_point(field_set:grpc_benchmark.ComplexObject.flag2)
}

// bytes vals = 5;
inline void ComplexObject::clear_vals() {
  _impl_.vals_.ClearToEmpty();
}
inline const std::string& ComplexObject::vals() const {
  // @@protoc_insertion_point(field_get:grpc_benchmark.ComplexObject.vals)
  return _internal_vals();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComplexObject::set_vals(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vals_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc_benchmark.ComplexObject.vals)
}
inline std::string* ComplexObject::mutable_vals() {
  std::string* _s = _internal_mutable_vals();
  // @@protoc_insertion_point(field_mutable:grpc_benchmark.ComplexObject.vals)
  return _s;
}
inline const std::string& ComplexObject::_internal_vals() const {
  return _impl_.vals_.Get();
}
inline void ComplexObject::_internal_set_vals(const std::string& value) {
  
  _impl_.vals_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexObject::_internal_mutable_vals() {
  
  return _impl_.vals_.Mutable(GetArenaForAllocation());
}
inline std::string* ComplexObject::release_vals() {
  // @@protoc_insertion_point(field_release:grpc_benchmark.ComplexObject.vals)
  return _impl_.vals_.Release();
}
inline void ComplexObject::set_allocated_vals(std::string* vals) {
  if (vals != nullptr) {
    
  } else {
    
  }
  _impl_.vals_.SetAllocated(vals, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vals_.IsDefault()) {
    _impl_.vals_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc_benchmark.ComplexObject.vals)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_benchmark

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
