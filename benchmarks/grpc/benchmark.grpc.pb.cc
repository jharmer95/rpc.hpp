// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: benchmark.proto

#include "benchmark.pb.h"
#include "benchmark.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_benchmark {

static const char* RpcBenchmark_method_names[] = {
  "/grpc_benchmark.RpcBenchmark/Fibonacci",
  "/grpc_benchmark.RpcBenchmark/GenRandInts",
  "/grpc_benchmark.RpcBenchmark/StdDev",
  "/grpc_benchmark.RpcBenchmark/AverageContainer_uint64",
  "/grpc_benchmark.RpcBenchmark/AverageContainer_double",
  "/grpc_benchmark.RpcBenchmark/HashComplex",
  "/grpc_benchmark.RpcBenchmark/KillServer",
};

std::unique_ptr< RpcBenchmark::Stub> RpcBenchmark::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RpcBenchmark::Stub> stub(new RpcBenchmark::Stub(channel, options));
  return stub;
}

RpcBenchmark::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Fibonacci_(RpcBenchmark_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenRandInts_(RpcBenchmark_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StdDev_(RpcBenchmark_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AverageContainer_uint64_(RpcBenchmark_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AverageContainer_double_(RpcBenchmark_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HashComplex_(RpcBenchmark_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KillServer_(RpcBenchmark_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RpcBenchmark::Stub::Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc_benchmark::Uint64* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Fibonacci_, context, request, response);
}

void RpcBenchmark::Stub::async::Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Fibonacci_, context, request, response, std::move(f));
}

void RpcBenchmark::Stub::async::Fibonacci(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Fibonacci_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Uint64>* RpcBenchmark::Stub::PrepareAsyncFibonacciRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Fibonacci_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Uint64>* RpcBenchmark::Stub::AsyncFibonacciRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Uint64& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFibonacciRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcBenchmark::Stub::GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc_benchmark::Vec_Uint64* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_benchmark::GenRandInts_Msg, ::grpc_benchmark::Vec_Uint64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenRandInts_, context, request, response);
}

void RpcBenchmark::Stub::async::GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_benchmark::GenRandInts_Msg, ::grpc_benchmark::Vec_Uint64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenRandInts_, context, request, response, std::move(f));
}

void RpcBenchmark::Stub::async::GenRandInts(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenRandInts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Vec_Uint64>* RpcBenchmark::Stub::PrepareAsyncGenRandIntsRaw(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::GenRandInts_Msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenRandInts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Vec_Uint64>* RpcBenchmark::Stub::AsyncGenRandIntsRaw(::grpc::ClientContext* context, const ::grpc_benchmark::GenRandInts_Msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenRandIntsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcBenchmark::Stub::StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc_benchmark::Double* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_benchmark::TenDoubles, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StdDev_, context, request, response);
}

void RpcBenchmark::Stub::async::StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_benchmark::TenDoubles, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StdDev_, context, request, response, std::move(f));
}

void RpcBenchmark::Stub::async::StdDev(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StdDev_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* RpcBenchmark::Stub::PrepareAsyncStdDevRaw(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_benchmark::Double, ::grpc_benchmark::TenDoubles, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StdDev_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* RpcBenchmark::Stub::AsyncStdDevRaw(::grpc::ClientContext* context, const ::grpc_benchmark::TenDoubles& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStdDevRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcBenchmark::Stub::AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc_benchmark::Double* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AverageContainer_uint64_, context, request, response);
}

void RpcBenchmark::Stub::async::AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AverageContainer_uint64_, context, request, response, std::move(f));
}

void RpcBenchmark::Stub::async::AverageContainer_uint64(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AverageContainer_uint64_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* RpcBenchmark::Stub::PrepareAsyncAverageContainer_uint64Raw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_benchmark::Double, ::grpc_benchmark::Vec_Uint64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AverageContainer_uint64_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* RpcBenchmark::Stub::AsyncAverageContainer_uint64Raw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Uint64& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAverageContainer_uint64Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcBenchmark::Stub::AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc_benchmark::Double* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_benchmark::Vec_Double, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AverageContainer_double_, context, request, response);
}

void RpcBenchmark::Stub::async::AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_benchmark::Vec_Double, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AverageContainer_double_, context, request, response, std::move(f));
}

void RpcBenchmark::Stub::async::AverageContainer_double(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AverageContainer_double_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* RpcBenchmark::Stub::PrepareAsyncAverageContainer_doubleRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_benchmark::Double, ::grpc_benchmark::Vec_Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AverageContainer_double_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Double>* RpcBenchmark::Stub::AsyncAverageContainer_doubleRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Vec_Double& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAverageContainer_doubleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcBenchmark::Stub::HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc_benchmark::String* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_benchmark::ComplexObject, ::grpc_benchmark::String, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HashComplex_, context, request, response);
}

void RpcBenchmark::Stub::async::HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_benchmark::ComplexObject, ::grpc_benchmark::String, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HashComplex_, context, request, response, std::move(f));
}

void RpcBenchmark::Stub::async::HashComplex(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HashComplex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::String>* RpcBenchmark::Stub::PrepareAsyncHashComplexRaw(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_benchmark::String, ::grpc_benchmark::ComplexObject, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HashComplex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::String>* RpcBenchmark::Stub::AsyncHashComplexRaw(::grpc::ClientContext* context, const ::grpc_benchmark::ComplexObject& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHashComplexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcBenchmark::Stub::KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc_benchmark::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_benchmark::Empty, ::grpc_benchmark::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KillServer_, context, request, response);
}

void RpcBenchmark::Stub::async::KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_benchmark::Empty, ::grpc_benchmark::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KillServer_, context, request, response, std::move(f));
}

void RpcBenchmark::Stub::async::KillServer(::grpc::ClientContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KillServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Empty>* RpcBenchmark::Stub::PrepareAsyncKillServerRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_benchmark::Empty, ::grpc_benchmark::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KillServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_benchmark::Empty>* RpcBenchmark::Stub::AsyncKillServerRaw(::grpc::ClientContext* context, const ::grpc_benchmark::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKillServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

RpcBenchmark::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcBenchmark_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcBenchmark::Service, ::grpc_benchmark::Uint64, ::grpc_benchmark::Uint64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcBenchmark::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_benchmark::Uint64* req,
             ::grpc_benchmark::Uint64* resp) {
               return service->Fibonacci(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcBenchmark_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcBenchmark::Service, ::grpc_benchmark::GenRandInts_Msg, ::grpc_benchmark::Vec_Uint64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcBenchmark::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_benchmark::GenRandInts_Msg* req,
             ::grpc_benchmark::Vec_Uint64* resp) {
               return service->GenRandInts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcBenchmark_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcBenchmark::Service, ::grpc_benchmark::TenDoubles, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcBenchmark::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_benchmark::TenDoubles* req,
             ::grpc_benchmark::Double* resp) {
               return service->StdDev(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcBenchmark_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcBenchmark::Service, ::grpc_benchmark::Vec_Uint64, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcBenchmark::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_benchmark::Vec_Uint64* req,
             ::grpc_benchmark::Double* resp) {
               return service->AverageContainer_uint64(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcBenchmark_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcBenchmark::Service, ::grpc_benchmark::Vec_Double, ::grpc_benchmark::Double, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcBenchmark::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_benchmark::Vec_Double* req,
             ::grpc_benchmark::Double* resp) {
               return service->AverageContainer_double(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcBenchmark_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcBenchmark::Service, ::grpc_benchmark::ComplexObject, ::grpc_benchmark::String, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcBenchmark::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_benchmark::ComplexObject* req,
             ::grpc_benchmark::String* resp) {
               return service->HashComplex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcBenchmark_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcBenchmark::Service, ::grpc_benchmark::Empty, ::grpc_benchmark::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcBenchmark::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_benchmark::Empty* req,
             ::grpc_benchmark::Empty* resp) {
               return service->KillServer(ctx, req, resp);
             }, this)));
}

RpcBenchmark::Service::~Service() {
}

::grpc::Status RpcBenchmark::Service::Fibonacci(::grpc::ServerContext* context, const ::grpc_benchmark::Uint64* request, ::grpc_benchmark::Uint64* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcBenchmark::Service::GenRandInts(::grpc::ServerContext* context, const ::grpc_benchmark::GenRandInts_Msg* request, ::grpc_benchmark::Vec_Uint64* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcBenchmark::Service::StdDev(::grpc::ServerContext* context, const ::grpc_benchmark::TenDoubles* request, ::grpc_benchmark::Double* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcBenchmark::Service::AverageContainer_uint64(::grpc::ServerContext* context, const ::grpc_benchmark::Vec_Uint64* request, ::grpc_benchmark::Double* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcBenchmark::Service::AverageContainer_double(::grpc::ServerContext* context, const ::grpc_benchmark::Vec_Double* request, ::grpc_benchmark::Double* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcBenchmark::Service::HashComplex(::grpc::ServerContext* context, const ::grpc_benchmark::ComplexObject* request, ::grpc_benchmark::String* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcBenchmark::Service::KillServer(::grpc::ServerContext* context, const ::grpc_benchmark::Empty* request, ::grpc_benchmark::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_benchmark

